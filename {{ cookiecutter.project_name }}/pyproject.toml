[build-system]
build-backend = "hatchling.build"
requires = [
  "hatchling>=1.26.3",
]

[project]
name = "{{ cookiecutter.project_name }}"
version = "0.0.1"
description = "{{ cookiecutter.description }}"
readme = "README.md"
authors = [{ name = "{{ cookiecutter.author_name }}", email = "{{ cookiecutter.author_email }}" }]
requires-python = ">=3.12"
classifiers = [
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
]
dependencies = [
  "boto3",
  "diskcache",
  "crispy-tailwind",
  "django[argon2]>=5.1",
  "django-allauth[socialaccount]",
  "django-anymail[amazon-ses]",
  "django-extensions",
  "django-health-check",
  "django-htmx",
  "django-lifecycle",
  "django-litestream",
  "django-storages[s3]",
  "django-tailwind-cli",
  "django-template-partials",
  "django-unique-user-email",
  "django-tasks", # remove when merged into django hopefully for 5.2
  "environs[django]",
  "falco-app",
  "falco-ui",
  "granian",
  "heroicons[django]",
  "pillow",
  "psycopg[binary,pool]",
  "sentry-sdk",
  "whitenoise[brotli]",
]

scripts.{{ cookiecutter.project_name }} = "{{ cookiecutter.project_name }}.__main__:main"

[tool.ruff]
target-version = "py312"

# Same as Black.
line-length = 88
indent-width = 4
extend-include = [ "*.pyi?" ]
# Exclude a variety of commonly ignored directories.
exclude = [
  ".bzr",
  ".direnv",
  ".eggs",
  ".git",
  ".github",
  ".hg",
  ".mypy_cache",
  ".ruff_cache",
  ".svn",
  ".tox",
  ".venv",
  "__pycache__",
  "__pypackages__",
  "_build",
  "build",
  "dist",
  "migrations",
  "node_modules",
  "venv",
]
# Like Black, indent with spaces, rather than tabs.
format.indent-style = "space"
# Like Black, use double quotes for strings.
format.quote-style = "double"
# Like Black, automatically detect the appropriate line ending.
format.line-ending = "auto"
lint.select = [
  "B",  # flake8-bugbear
  "E",  # Pycodestyle
  "F",  # Pyflakes
  "UP", # pyupgrade
]
lint.ignore = [ "E501", "E741" ] # temporary
# Allow autofix for all enabled rules (when `--fix`) is provided.
lint.fixable = [ "A", "B", "C", "D", "E", "F", "I" ]
lint.unfixable = [  ]
# Allow unused variables when underscore-prefixed.
lint.dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.pytest.ini_options]
DJANGO_SETTINGS_MODULE = "{{ cookiecutter.project_name }}.settings"
addopts = "--reuse-db -n auto"
norecursedirs = ".* bin build dist *.egg htmlcov logs node_modules static templates venv"
python_files = "tests.py test_*.py *_tests.py"

[tool.coverage.run]
source_pkgs = [ "{{ cookiecutter.project_name }}", "tests" ]
branch = true
parallel = true

[tool.coverage.paths]
{{ cookiecutter.project_name }} = [ "*/{{ cookiecutter.project_name }}/{{ cookiecutter.project_name }}" ]
tests = [ "tests", "*/{{ cookiecutter.project_name }}/tests" ]

[tool.coverage.report]
exclude_lines = [ "no cov", "if __name__ == .__main__.:", "if TYPE_CHECKING:" ]

[tool.bumpversion]
current_version = "0.0.1"
parse = "(?P<major>\\d+)\\.(?P<minor>\\d+)\\.(?P<patch>\\d+)"
serialize = [
  "{major}.{minor}.{patch}",
]
search = "{current_version}"
replace = "{new_version}"
regex = false
ignore_missing_version = false
ignore_missing_files = false
tag = true
sign_tags = false
tag_name = "v{new_version}"
tag_message = "Bump version: {current_version} ‚Üí {new_version}"
allow_dirty = false
commit = true
message = "Bump version: {current_version} ‚Üí {new_version}"
commit_args = "--no-verify"

[[tool.bumpversion.files]]
filename = "pyproject.toml"
search = 'version = "{current_version}"'
replace = 'version = "{new_version}"'

[tool.mypy]
python_version = "3.12"
check_untyped_defs = true
ignore_missing_imports = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_unused_configs = true
plugins = [ "mypy_django_plugin.main" ]

[[tool.mypy.overrides]]
ignore_errors = true
module = [
  "allauth.*",
  "boto3.*",
  "botocore.*",
  "debug_toolbar.*",
  "django_filters.*",
  "django_q.*",
  "djclick.*",
  "gunicorn.*",
  "health_check.*",
  "*.migrations.*",
]

[dependency-groups]
dev = [
  "django-browser-reload",
  "django-debug-toolbar",
  "dj-notebook>=0.6.1",
  "Werkzeug[watchdog]>=3.0.1",
  "django-stubs[compatible-mypy]",
  "django-fastdev",
  "django-watchfiles",
  "coverage[toml]>=6.5",
  "pytest",
  "pytest-django",
  "pytest-sugar",
  "pytest-xdist",
  "falco-cli>=0.27.0a6",
  "honcho",
]
docs = [
  "furo",
  "sphinx",
  "sphinx-autobuild",
  "sphinx-copybutton",
  "sphinx-design",
  "myst-parser",
]

[tool.uv]
default-groups = [ "dev", "docs" ]

[tool.django-stubs]
django_settings_module = "{{ cookiecutter.project_name }}.settings"

[tool.mypy_django_plugin]
ignore_missing_model_attributes = true

[tool.git-cliff.changelog]
header = {% raw %}"""
# Changelog\n
All notable changes to this project will be documented in this file.\n
This project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n
"""
body = """
{% if version %}\
    ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
{% else %}\
    ## [unreleased]
{% endif %}\
{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | striptags | trim | upper_first }}
    {% for commit in commits %}
        - {% if commit.scope %}*({{ commit.scope }})* {% endif %}\
            {% if commit.breaking %}[**breaking**] {% endif %}\
            {{ commit.message | upper_first }}\
    {% endfor %}
{% endfor %}\n
"""{% endraw %}
footer = """
<!-- generated by git-cliff -->
"""
trim = true

[tool.git-cliff.git]
conventional_commits = true
filter_unconventional = true
split_commits = false
commit_parsers = [
  { message = "^feat", group = "<!-- 0 -->üöÄ Features" },
  { message = "^fix", group = "<!-- 1 -->üêõ Bug Fixes" },
  { message = "^doc|^docs", group = "<!-- 3 -->üìö Documentation" },
  { message = "^perf", group = "<!-- 4 -->‚ö° Performance" },
  { message = "^refactor", group = "<!-- 2 -->üöú Refactor" },
  { message = "^style", group = "<!-- 5 -->üé® Styling" },
  { message = "^test", group = "<!-- 6 -->üß™ Testing" },
  { message = "^build", group = "<!-- 7 -->üì¶ Build" },
  { message = "^chore\\(release\\): prepare for", skip = true },
  { message = "^chore\\(deps.*\\)", skip = true },
  { message = "^chore\\(pr\\)", skip = true },
  { message = "^chore\\(pull\\)", skip = true },
  { message = "^chore|^ci", group = "<!-- 8 -->‚öôÔ∏è Miscellaneous Tasks" },
  { body = ".*security", group = "<!-- 9 -->üõ°Ô∏è Security" },
  { message = "^revert", group = "<!-- 10 -->‚óÄÔ∏è Revert" },
]
protect_breaking_commits = false
filter_commits = false
topo_order = false
sort_commits = "newest"
