[project]
name = "falco-starter-template"
version = "2024.12.21"
description = "Falco project starter template"
readme = "README.md"
authors = [
  { name = "Tobi", email = "tobidegnon@proton.me" },
]
requires-python = ">=3.12"
classifiers = [
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
]
dependencies = [
  "myst-parser>=4",
  "shibuya>=2024.12.15",
  "sphinx>=8.1.3",
  "sphinx-autobuild>=2024.10.3",
  "sphinx-copybutton>=0.5.2",
  "sphinx-design>=0.6.1",
  "sphinx-docsearch>=0.1",
  "sphinx-tabs>=3.4.7",
  "sphinx-togglebutton>=0.3.2",
  "falco-cli>=0.27.0a6",
]

[tool.bumpversion]
current_version = "2024.12.21"
parse = """(?x)                     # Verbose mode
    (?P<release>                    # The release part
        (?:[1-9][0-9]{3})\\.        # YYYY.
        (?:1[0-2]|[1-9])\\.         # MM.
        (?:3[0-1]|[1-2][0-9]|[1-9]) # DD
    )
    (?:\\.(?P<patch>\\d+))?         # .patch, optional
"""
serialize = ["{release}.{patch}", "{release}"]
search = "{current_version}"
replace = "{new_version}"
regex = false
ignore_missing_version = false
ignore_missing_files = false
tag = true
sign_tags = false
tag_name = "v{new_version}"
tag_message = "Bump version: {current_version} → {new_version}"
allow_dirty = false
commit = true
message = "Bump version: {current_version} → {new_version}"
commit_args = "--no-verify"

[[tool.bumpversion.files]]
filename = "pyproject.toml"
search = 'version = "{current_version}"'
replace = 'version = "{new_version}"'

[tool.git-cliff.changelog]
header = """
# Changelog\n
All notable changes to this project will be documented in this file.\n
This project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n
"""
body = """
{% if version %}\
    ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
{% else %}\
    ## [unreleased]
{% endif %}\
{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | striptags | trim | upper_first }}
    {% for commit in commits %}
        - {% if commit.scope %}*({{ commit.scope }})* {% endif %}\
            {% if commit.breaking %}[**breaking**] {% endif %}\
            {{ commit.message | upper_first }}\
    {% endfor %}
{% endfor %}\n
"""
footer = """
<!-- generated by git-cliff -->
"""
trim = true

[tool.git-cliff.git]
conventional_commits = true
filter_unconventional = true
split_commits = false
commit_parsers = [
  { message = "^feat", group = "<!-- 0 -->🚀 Features" },
  { message = "^fix", group = "<!-- 1 -->🐛 Bug Fixes" },
  { message = "^doc|^docs", group = "<!-- 3 -->📚 Documentation" },
  { message = "^perf", group = "<!-- 4 -->⚡ Performance" },
  { message = "^refactor", group = "<!-- 2 -->🚜 Refactor" },
  { message = "^style", group = "<!-- 5 -->🎨 Styling" },
  { message = "^test", group = "<!-- 6 -->🧪 Testing" },
  { message = "^build", group = "<!-- 7 -->📦 Build" },
  { message = "^chore\\(release\\): prepare for", skip = true },
  { message = "^chore\\(deps.*\\)", skip = true },
  { message = "^chore\\(pr\\)", skip = true },
  { message = "^chore\\(pull\\)", skip = true },
  { message = "^chore|^ci", group = "<!-- 8 -->⚙️ Miscellaneous Tasks" },
  { body = ".*security", group = "<!-- 9 -->🛡️ Security" },
  { message = "^revert", group = "<!-- 10 -->◀️ Revert" },
]
protect_breaking_commits = false
filter_commits = false
topo_order = false
sort_commits = "newest"
